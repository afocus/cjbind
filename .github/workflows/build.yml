name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  release:
    types: ["created"]

permissions:
  contents: "write"

jobs:
  build:
    strategy:
      matrix:
        os: 
          - runner: ubuntu-24.04
            sys: linux
            arch: x64
            friendly_name: "Linux (x64)"
          - runner: ubuntu-24.04-arm
            sys: linux
            arch: arm64
            friendly_name: "Linux (ARM64)"
          - runner: macos-15
            sys: darwin
            arch: arm64
            friendly_name: "macOS (Apple Silicon)"
          - runner: windows-2025
            sys: windows
            arch: x64
            friendly_name: "Windows (x64)"
        debug: [true, false]
      fail-fast: false

    runs-on: ${{ matrix.os.runner }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache libclang
        id: cache-libclang
        uses: actions/cache@v4
        with:
          path: lib/libclang
          key: libclang-${{ matrix.os.runner }}-${{ matrix.os.arch }}-19.1.7

      - name: Download libclang
        if: steps.cache-libclang.outputs.cache-hit != 'true'
        run: |
          pip install -r scripts/requirements.txt
          python scripts/download.py

      - name: Setup Cangjie
        uses: Zxilly/setup-cangjie@v1.4.1
        with:
          channel: "canary"
          token: ${{ secrets.GITCODE_TOKEN }}

      - name: Setup MSYS2
        if: matrix.os.sys == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
          path-type: inherit

      - name: Build Unix Debug
        if: matrix.os.sys != 'windows' && matrix.debug == 'true'
        run: |
          python scripts/cjpm.py build --cfg_verbose -V -g

      - name: Build Unix Release
        if: matrix.os.sys != 'windows' && matrix.debug == 'false'
        run: |
          python scripts/cjpm.py build --cfg_verbose -V

      - name: Build Windows
        if: matrix.os.sys == 'windows' && matrix.debug == 'true'
        shell: msys2 {0}
        run: |
          python scripts/cjpm.py build --cfg_verbose -V -g

      - name: Build Windows
        if: matrix.os.sys == 'windows' && matrix.debug == 'false'
        shell: msys2 {0}
        run: |
          python scripts/cjpm.py build --cfg_verbose -V

      - name: Test binary
        shell: bash
        run: |
            if ${{ matrix.debug }}; then
              ./target/debug/bin/main${{ matrix.os.ext }} --version
            else
              ./target/release/bin/main${{ matrix.os.ext }} --version
            fi

      - name: Upload artifact
        if: always() && matrix.debug == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: cjbind-${{ matrix.os.runner }}-${{ matrix.os.arch }}-release
          path: |
            target/release/bin/main*
      
      - name: Upload artifact
        if: always() && matrix.debug == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cjbind-${{ matrix.os.runner }}-${{ matrix.os.arch }}-debug
          path: |
            target/debug/bin/main*

      - name: Rename binary
        if: github.event_name == 'release'
        shell: bash
        run: |
          cd target/release/bin
          mv main${{ matrix.os.ext }} cjbind-${{ matrix.os.sys }}-${{ matrix.os.arch }}${{ matrix.os.ext }}

      - name: Upload to Release
        if: github.event_name == 'release'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_PATH: target/release/bin/cjbind-${{ matrix.os.sys }}-${{ matrix.os.arch }}${{ matrix.os.ext }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} "$ASSET_PATH#${{ matrix.os.friendly_name }}" \
            --clobber
